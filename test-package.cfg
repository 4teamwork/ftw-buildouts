# A buildout base configuration used for running tests only. It is optimized
# for jenkins (continuous integration).

[buildout]
extends =
    https://raw.github.com/4teamwork/ftw-buildouts/master/test-base.cfg

parts +=
    test-jenkins

    pep8
    pyflakes
    pylint-rc
    pylint
    clonedigger
    zptlint
    i18ndude
    check-translations

# mr.developer defaults for testing buildouts
auto-checkout = *
always-checkout = force
always-accept-server-certificate = true

newest = true


# bin/test-jenkins : A script running the tests with coverage and running
# various code analysis tools.
[test-jenkins]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    bin/test-coverage xml $@
    echo "pep8 -> ${buildout:results-dir}/pep8.log"
    bin/pep8 | tee ${buildout:results-dir}/pep8.log > /dev/null

    echo "pyflakes -> ${buildout:results-dir}/pyflakes.log"
    bin/pyflakes | tee ${buildout:results-dir}/pyflakes.log > /dev/null

    echo "pylint -> ${buildout:results-dir}/pylint.log"
    bin/pylint | tee ${buildout:results-dir}/pylint.log > /dev/null

    echo "clonedigger -> ${buildout:results-dir}/clonedigger.xml"
    bin/clonedigger --cpd-output -o ${buildout:results-dir}/clonedigger.xml > /dev/null

    echo "zptlint -> ${buildout:results-dir}/zptlint.log"
    bin/zptlint | tee ${buildout:results-dir}/zptlint.log > /dev/null

    echo "check translations > ${buildout:results-dir}/translations.html"
    echo "<pre>" > ${buildout:results-dir}/translations.html
    bin/check-translations | sed -e 's/>/\&gt;/' -e 's/</\&lt;/' >> ${buildout:results-dir}/translations.html
    echo "</pre>" >> ${buildout:results-dir}/translations.html

output = ${buildout:directory}/bin/test-jenkins
mode = 755




# bin/pep8 : PEP8 validation of the packages source.
[pep8]
recipe = zc.recipe.egg
eggs = pep8
initialization =
    import os
    import subprocess
    os.chdir("${buildout:directory}")
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend([pkgdir, '--exclude=tests'])



# bin/pyflakes : Pyflakes validation of the packages source.
[pyflakes]
recipe = zc.recipe.egg
eggs = pyflakes
entry-points = pyflakes=pyflakes.scripts.pyflakes:main
initialization =
    import os
    import subprocess
    os.chdir("${buildout:directory}")
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend([pkgdir])



# bin/pylint : Pylint validation of the packages source.
[pylint]
recipe = zc.recipe.egg
eggs =
    pylint
    ${test:eggs}
entry-points = pylint=pylint.lint:Run
initialization =
    import os
    import subprocess
    os.chdir("${buildout:directory}")
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
arguments = ['--rcfile=${pylint-rc:rcfile}', '--ignore=tests', pkgdir] + sys.argv[1:]


# Downloads the default pylintrc.
[pylint-rc]
recipe = collective.recipe.shelloutput
rcfile = ${buildout:directory}/parts/pylint/pylintrc
rcurl = https://raw.github.com/4teamwork/ftw-buildouts/master/pylintrc
commands =
    cmd1 = mkdir -p `dirname ${pylint-rc:rcfile}`
    cmd2 = curl "${pylint-rc:rcurl}" > "${pylint-rc:rcfile}"


[clonedigger]
recipe = zc.recipe.egg
eggs =
    clonedigger
initialization =
    import subprocess
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend(['--ignore-dir=tests', pkgdir])


[zptlint]
recipe = zc.recipe.egg
eggs = zptlint
initialization =
    import subprocess
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    ptfiles = subprocess.Popen(
        'find %s -name "*.pt"' % pkgdir,
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend(ptfiles and ptfiles.split('\n') or [])


[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude



[check-translations]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    buildoutdir="${buildout:directory}"
    pkgdir=`$buildoutdir/bin/package-directory`
    pkgname="${buildout:package-name}"

    echo ""
    echo "===================================================="
    echo "   Not translatable strings in package templates"
    echo "===================================================="
    echo ""
    $buildoutdir/bin/i18ndude find-untranslated $pkgdir | sed -e '/^Processing/ { N; s/\n//; D; }' -e '/^-*$/ {s/^.*$//;}' -e '/^===/d'
    echo ""

    echo ""
    echo "===================================================="
    echo "               Translation statistics"
    echo "===================================================="
    echo ""

    tmpdir=$buildoutdir/parts/test-i18n
    mkdir -p $tmpdir

    domains=`find $pkgdir -name '*.pot' | grep -v '\-manual\.pot' | sed -e 's/.*\/\(.*\).pot$/\1/'`

    if [[ "$domains" == "" ]]; then
        echo "There are no .pot files."
    fi

    for domain in $domains; do
        rm -f $tmpdir/*

        if [[ "$domain" == "$pkgname" ]]; then
            echo "i18n domain: $domain (primary)"
            # Rebuilding pot file from source since this seems to be the
            # primary package domain.
            buildargs="--pot $tmpdir/$domain.pot --create $domain"
            manualfile=`find $pkgdir -name "$domain-manual.pot"`
            if [[ "$manualfile" != "" ]]; then
                buildargs="$buildargs --merge $manualfile"
            fi
            $buildoutdir/bin/i18ndude rebuild-pot $buildargs $pkgdir

        else
            echo "i18n domain: $domain"
            find $pkgdir -name "$domain.pot" -exec cp {} $tmpdir/$domain.pot \;
            manualfile=`find $pkgdir -name "$domain-manual.pot"`
            if [[ "$manualfile" != "" ]]; then
                $buildoutdir/bin/i18ndude merge --pot $tmpdir/$domain.pot --merge $manualfile &> /dev/null
            fi

        fi

        language_pattern="\(en\)"
        for pofile in $(find $pkgdir -name "$domain*.po"); do
            if [[ $pofile =~ /LC_MESSAGES/ ]]; then
                lang=`echo $pofile | sed -e 's/.*\/\(.*\)\/LC_MESSAGES.*/\1/'`
                tmppofile=$tmpdir/$domain-$lang.po
                cp $pofile $tmppofile
                language_pattern="$language_pattern|\($lang\)"

                if [[ `grep -r '"Language-Code:' $tmppofile` == "" ]]; then
                    sed -i "" -e '1,/^$/ { s/^$/"Language-Code: de\\n"/; }' $tmppofile
                fi

            else
                echo "Ignoring file $pofile since LC_MESSAGES could not be found."
            fi
        done

        (cd $tmpdir && $buildoutdir/bin/i18ndude list --products $domain | egrep $language_pattern)
        echo ""

    done

output = ${buildout:directory}/bin/check-translations
mode = 755
