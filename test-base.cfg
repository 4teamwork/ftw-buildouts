# A buildout base configuration providing zope testrunner setup.
# The buildout basically provides two scripts, usable in test-setup as well
# as in development:
#
# bin/test : Runs the tests of the package (using collective.xmltestreport)
# bin/test-coverage : Runs the tests of the package, generates and opens
# a coverage report.
#
# Usage example:
# [buildout]
# extends =
#     https://raw.github.com/4teamwork/ftw-buildouts/master/test-base.cfg
# package-name = my.package


[buildout]

# =====================================================================

# Configuration variables:
package-name =

test-egg = ${buildout:package-name} [tests]
package-directory =


# =====================================================================

parts =
    test
    test-coverage
    package-directory
    coverage

# We assume that the buildout directory is the package root (repository root)
# of the package we are testing.
develop = .

results-dir = ${buildout:directory}/parts/testresults



# bin/test : A script running the tests of the configured package.
[test]
recipe = collective.xmltestreport
eggs = ${buildout:test-egg}
script = test
defaults =
         ['-s', '${buildout:package-name}', '--exit-with-status', '--auto-color', '--auto-progress', '--xml']



# bin/coverage : A helper script generating a coverage report.
[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    import os
    os.environ['COVERAGE_FILE'] = "${buildout:results-dir}/coverage.data"



# bin/test-coverage : A script for running the tests with coverage and
# opening the coverage report in the browser.
[test-coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    mkdir -p ${buildout:results-dir}
    pkgdir=`${buildout:directory}/bin/package-directory`
    bin/coverage erase
    bin/coverage run --source=$pkgdir bin/test $@
    if [[ "$1" == "xml" ]]; then
        bin/coverage xml -i -o ${buildout:results-dir}/coverage.xml
    else
        bin/coverage html -i -d ${buildout:results-dir}/coverage/ && open ${buildout:results-dir}/coverage/index.html
    fi
output = ${buildout:directory}/bin/test-coverage
mode = 755



# bin/package-directory : A script returning the path to the source
# directory. It guesses the package namespace from the package name by
# replacing dots with slashes.
# For packages which use a different namespace as guessable by the package
# name, the path can be set using the ${buildout:package-directory}
# variable (path relative to buildout directory). Example::
# [buildout]
# package-name = MyPackage
# package-directory = scr/my/package/core
[package-directory]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    pkgdir="${buildout:package-directory}"
    pkgname="${buildout:package-name}"
    namepath=`echo $pkgname | sed "s:\.:/:g"`
    base="${buildout:directory}"
    paths=$(echo "$pkgdir" "$namepath" "src/$namepath" "src/$pkgname/$namepath")
    for path in $paths; do
        if [ -d "$base/$path" ]; then
            if [[ "$1" == "relative" ]]; then
                echo "$path"
            else
                echo "$base/$path"
            fi
            exit 0
        fi
    done
    exit 1

output = ${buildout:directory}/bin/package-directory
mode = 755
