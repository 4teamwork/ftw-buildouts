# A buildout base configuration providing zope testrunner setup.
# The buildout basically provides two scripts, usable in test-setup as well
# as in development:
#
# bin/test : Runs the tests of the package (using collective.xmltestreport)
# bin/test-coverage : Runs the tests of the package, generates and opens
# a coverage report.
#
# Usage example:
# [buildout]
# extends =
#     https://raw.github.com/4teamwork/ftw-buildouts/master/test-base.cfg
# package-name = my.package


[buildout]

# =====================================================================

# Configuration variables:
package-name =

test-egg = ${buildout:package-name} [tests]
package-directory =


# =====================================================================

parts =
    test
    test-coverage
    package-directory
    coverage
    pep8
    pyflakes
    pylint
    pylint-rc
    clonedigger
    zptlint
    i18ndude
    check-translations
    omelette

# We assume that the buildout directory is the package root (repository root)
# of the package we are testing.
develop = .

results-dir = ${buildout:directory}/parts/testresults

extensions +=
    buildout.dumppickedversions
    lovely.buildouthttp



# bin/test : A script running the tests of the configured package.
[test]
recipe = collective.xmltestreport
eggs = ${buildout:test-egg}
script = test
defaults =
         ['-s', '${buildout:package-name}', '--exit-with-status', '--auto-color', '--auto-progress', '--xml']



# bin/coverage : A helper script generating a coverage report.
[coverage]
recipe = zc.recipe.egg
eggs = coverage
initialization =
    import os
    os.environ['COVERAGE_FILE'] = "${buildout:results-dir}/coverage.data"
    # XXX HACK: let coverage exit with a propper exit code.
    # See: https://bugs.launchpad.net/zc.buildout/+bug/164629
    import coverage
    if __name__ == '__main__': sys.exit(coverage.main())



# bin/test-coverage : A script for running the tests with coverage and
# opening the coverage report in the browser.
[test-coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    mkdir -p ${buildout:results-dir}
    pkgdir=`${buildout:directory}/bin/package-directory`
    bin/coverage erase
    if [[ "$1" == "xml" ]]; then
        shift
        bin/coverage run --branch --source=$pkgdir bin/test $@
        result=$?
        bin/coverage xml -i --omit="*tests/*.py,*testing.py,*interfaces.py" -o ${buildout:results-dir}/coverage.xml
    else
        bin/coverage run --branch --source=$pkgdir bin/test $@
        result=$?
        bin/coverage html -i --omit="*tests/*.py,*testing.py,*interfaces.py" -d ${buildout:results-dir}/coverage/ && open ${buildout:results-dir}/coverage/index.html
    fi
    exit $result
output = ${buildout:directory}/bin/test-coverage
mode = 755



# bin/package-directory : A script returning the path to the source
# directory. It guesses the package namespace from the package name by
# replacing dots with slashes.
# For packages which use a different namespace as guessable by the package
# name, the path can be set using the ${buildout:package-directory}
# variable (path relative to buildout directory). Example::
# [buildout]
# package-name = MyPackage
# package-directory = scr/my/package/core
[package-directory]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    pkgdir="${buildout:package-directory}"
    pkgname="${buildout:package-name}"
    namepath=`echo $pkgname | sed "s:\.:/:g"`
    base="${buildout:directory}"
    paths=$(echo "$pkgdir" "$namepath" "src/$namepath" "src/$pkgname/$namepath")
    for path in $paths; do
        if [ -d "$base/$path" ]; then
            if [[ "$1" == "relative" ]]; then
                echo "$path"
            else
                echo "$base/$path"
            fi
            exit 0
        fi
    done
    exit 1

output = ${buildout:directory}/bin/package-directory
mode = 755



# bin/pep8 : PEP8 validation of the packages source.
[pep8]
recipe = zc.recipe.egg
eggs = pep8
initialization =
    import os
    import subprocess
    os.chdir("${buildout:directory}")
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend([pkgdir, '--exclude=tests'])



# bin/pyflakes : Pyflakes validation of the packages source.
[pyflakes]
recipe = zc.recipe.egg
eggs = pyflakes
entry-points = pyflakes=pyflakes.scripts.pyflakes:main
initialization =
    import os
    import subprocess
    os.chdir("${buildout:directory}")
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend([pkgdir])



# bin/pylint : Pylint validation of the packages source.
[pylint]
recipe = zc.recipe.egg
eggs =
    pylint
    ${test:eggs}
entry-points = pylint=pylint.lint:Run
initialization =
    import os
    import subprocess
    os.chdir("${buildout:directory}")
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
arguments = ['--rcfile=${pylint-rc:rcfile}', '--ignore=tests', pkgdir] + sys.argv[1:]



# Downloads the default pylintrc.
[pylint-rc]
recipe = collective.recipe.shelloutput
rcfile = ${buildout:directory}/parts/pylint/pylintrc
rcurl = https://raw.github.com/4teamwork/ftw-buildouts/master/pylintrc
commands =
    cmd1 = mkdir -p `dirname ${pylint-rc:rcfile}`
    cmd2 = curl "${pylint-rc:rcurl}" > "${pylint-rc:rcfile}"



# bin/clonedigger : Finds code clones.
[clonedigger]
recipe = zc.recipe.egg
eggs =
    clonedigger
initialization =
    import subprocess
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend(['--ignore-dir=tests', pkgdir])



# bin/ptlint : Zope page tempalte validation.
[zptlint]
recipe = zc.recipe.egg
eggs = zptlint
initialization =
    import subprocess
    pkgdir = subprocess.Popen(
        '${buildout:directory}/bin/package-directory relative',
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    ptfiles = subprocess.Popen(
        'find %s -name "*.pt"' % pkgdir,
        shell=True, stdout=subprocess.PIPE).stdout.read().strip()
    sys.argv.extend(ptfiles and ptfiles.split('\n') or [])
    if len(sys.argv) == 1: sys.exit(0)



# bin/i18ndude : Translation tools for ZPT and python scripts.
[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude



# bin/check-translations : Validates translatable strings and
# provides translation statistics.
[check-translations]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    buildoutdir="${buildout:directory}"
    pkgdir=`$buildoutdir/bin/package-directory`
    pkgname="${buildout:package-name}"

    echo ""
    echo "===================================================="
    echo "   Not translatable strings in package templates"
    echo "===================================================="
    echo ""
    $buildoutdir/bin/i18ndude find-untranslated $pkgdir | sed -e '/^Processing/ { N; s/\n//; D; }' -e '/^-*$/ {s/^.*$//;}' -e '/^===/d'
    echo ""

    echo ""
    echo "===================================================="
    echo "               Translation statistics"
    echo "===================================================="
    echo ""

    tmpdir=$buildoutdir/parts/test-i18n
    mkdir -p $tmpdir

    domains=`find $pkgdir -name '*.pot' | grep -v '\-manual\.pot' | sed -e 's/.*\/\(.*\).pot$/\1/'`

    if [[ "$domains" == "" ]]; then
        echo "There are no .pot files."
    fi

    for domain in $domains; do
        rm -f $tmpdir/*

        if [[ "$domain" == "$pkgname" ]]; then
            echo "i18n domain: $domain (primary)"
            # Rebuilding pot file from source since this seems to be the
            # primary package domain.
            buildargs="--pot $tmpdir/$domain.pot --create $domain"
            manualfile=`find $pkgdir -name "$domain-manual.pot"`
            if [[ "$manualfile" != "" ]]; then
                buildargs="$buildargs --merge $manualfile"
            fi
            $buildoutdir/bin/i18ndude rebuild-pot $buildargs $pkgdir

        else
            echo "i18n domain: $domain"
            find $pkgdir -name "$domain.pot" -exec cp {} $tmpdir/$domain.pot \;
            manualfile=`find $pkgdir -name "$domain-manual.pot"`
            if [[ "$manualfile" != "" ]]; then
                $buildoutdir/bin/i18ndude merge --pot $tmpdir/$domain.pot --merge $manualfile &> /dev/null
            fi

        fi

        language_pattern="\(en\)"
        for pofile in $(find $pkgdir -name "$domain*.po"); do
            if [[ $pofile =~ /LC_MESSAGES/ ]]; then
                lang=`echo $pofile | sed -e 's/.*\/\(.*\)\/LC_MESSAGES.*/\1/'`
                tmppofile=$tmpdir/$domain-$lang.po
                cp $pofile $tmppofile
                language_pattern="$language_pattern|\($lang\)"

                if [[ `grep -r '"Language-Code:' $tmppofile` == "" ]]; then
                    sed -i -e "1,/^$/ { s/^$/\"Language-Code: $lang\\\\n\"/; }" $tmppofile
                fi

            else
                echo "Ignoring file $pofile since LC_MESSAGES could not be found."
            fi
        done

        (cd $tmpdir && $buildoutdir/bin/i18ndude list --products $domain | egrep $language_pattern)
        echo ""

    done

output = ${buildout:directory}/bin/check-translations
mode = 755


# parts/omlette
[omelette]
recipe = collective.recipe.omelette
eggs =
    ${test:eggs}
