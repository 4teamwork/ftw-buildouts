# A buildout base configuration for plone development.
# Parts:
# bin/instance : The zope instance.
# bin/test : Test runner, testing the package defined in ${buildout:package-name}.
# bin/test-coverage : Test runner with coverage report.
# parts/omelette : Omelette with instance and test eggs.
#
# Example usage:
# [buildout]
# extends =
#     https://raw.github.com/4teamwork/ftw-buildouts/master/plone-development.cfg
# package-name = my.package


[buildout]
parts +=
    instance
    zopepy
    i18n-build
    omelette

i18n-domain = ${buildout:package-namespace}

always-checkout = false


[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = on
verbose-security = on
blob-storage = var/blobstorage
eggs =
    Plone
    ${buildout:package-name}
    plone.reload
    collective.z3cinspector

environment-vars =
    zope_i18n_compile_mo_files true


[omelette]
# parts/omlette
[omelette]
recipe = collective.recipe.omelette
eggs =
    ${test:eggs}
    ${instance:eggs}


[zopepy]
recipe = zc.recipe.egg
eggs =
    ${instance:eggs}
    ${test:eggs}
interpreter = zopepy
scripts = zopepy


[i18n-build]
recipe = collective.recipe.template
output = ${buildout:directory}/bin/i18n-build
mode = 755
input = inline:
    #!/bin/sh
    buildoutdir="${buildout:directory}"
    pkgdir=./`$buildoutdir/bin/package-directory relative`
    i18ndude="$buildoutdir/bin/i18ndude"
    defaultdomain="${buildout:i18n-domain}"

    locales="$pkgdir/locales"
    for potfile in `find $locales -name "*.pot" -depth 1 | grep -v ".*-manual.pot$"`; do
        domain=`basename $potfile | sed -e 's:.pot$::'`

        if [ "$domain" == "$defaultdomain" ]; then
            manual=`echo "$potfile" | sed -e "s:.pot:-manual.pot:"`
            if [[ -a $manual ]]; then
                mergeparam=" --merge $manual"
            else
                mergeparam=""
            fi

            echo "BUILD POT FILE $domain"
            cmd="$i18ndude rebuild-pot --pot $potfile$mergeparam --create $domain $pkgdir"
            echo "> $cmd"
            $cmd
            echo ""
        fi

        echo "SYNC LANGUAGES $domain"
        for langdir in `find $locales -type d -depth 1`; do
            pofile="$langdir/LC_MESSAGES/$domain.po"
            cmd="$i18ndude sync --pot $potfile $pofile"
            echo ""
            echo "> $cmd"
            $cmd
            mv $pofile $pofile.orig && cat $pofile.orig | sed -e '/^\"Language-[CN].*$/d' -e '/^\"Domain.*$/d' > $pofile && rm $pofile.orig
        done
        for lang in $@; do
            pofile="$pkgdir/locales/$lang/LC_MESSAGES/$domain.po"
            echo ""
            cmd="mkdir -p `dirname $pofile`"
            echo "> $cmd"
            $cmd
            cmd="touch $pofile"
            echo "> $cmd"
            $cmd
            cmd="$i18ndude sync --pot $potfile $pofile"
            echo "> $cmd"
            $cmd
            mv $pofile $pofile.orig && cat $pofile.orig | sed -e '/^\"Language-[CN].*$/d' -e '/^\"Domain.*$/d' > $pofile && rm $pofile.orig
        done
        echo ""
        echo "------------------------------"
        echo ""
    done

    echo "(pass new language code as argument, e.g. ./bin/i18n-build de)"
